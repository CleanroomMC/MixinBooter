import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'io.github.srdjan-v.local-git-dependency' version '0.5.2' //Expect breaking changes for every new version, except minor ones
}

def coremod_plugin_name = 'zone.rong.mixinbooter.MixinBooterPlugin'

version = '8.4'
group = 'zone.rong'
archivesBaseName = 'mixinbooter'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

minecraft {
    mcVersion = '1.12.2'
    extraRunJvmArguments.addAll([
            "-ea:${project.group}",
            "-Dfml.coreMods.load=${coremod_plugin_name}",
            '-Dmixin.checks.interfaces=true',
            '-Dmixin.debug.export=true'
    ])
    extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')
    injectedTags.put('VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("zone.rong.mixinbooter.Tags")
}

sourceSets {
    relocate {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    embed
    mixin
    implementation.extendsFrom embed
    embed.extendsFrom mixin
    annotationProcessor.extendsFrom mixin
}

repositories {
    maven {
        url 'https://jitpack.io'
    }
    // maven {
        // name 'Fabric'
        // url 'https://maven.fabricmc.net/'
    // }
}

dependencies {
    // String mixinDep = modUtils.enableMixins('com.github.LegacyModdingMC:UniMix:0.12.2_mixin.0.8.5')
    modUtils.enableMixins('com.github.CleanroomMC:UniMix')
    embed 'com.github.LlamaLad7.MixinExtras:mixinextras-common:0.2.0-beta.9'
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:24.1.1-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.6'
}

//This extension will be redone at some point before 1.0.0
localGitDependency {
    add('https://github.com/CleanroomMC/UniMix.git', {
        //setting to false because it will overwrite any local changes trying to keep it up to date with the remote
        keepGitUpdated false
        enableIdeSupport true
        branch "main"
        configuration({
            configuration "mixin"
            closure {
                transitive = false
            }
        })
    })
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
}

tasks.register('properJar', Jar) { jar ->

    // Gather all service files, append them under the same file if possible
    doFirst {
        def serviceDir = file("$buildDir/tmp/services_cleanup/META-INF/services")
        serviceDir.deleteDir()
        serviceDir.mkdirs()

        configurations.embed.each { file ->
            zipTree(file).matching {
                include 'META-INF/services/*'
            }.each { serviceFile ->
                new File(serviceDir, serviceFile.name) << serviceFile.getText("UTF-8") << '\n'
            }
        }
    }

    // Set output jar name to have an exclamation mark at the front
    jar.archiveBaseName.set("!${project.archivesBaseName}")

    // Gather all main source/resource files, excluding any META-INF and replaceable files
    from sourceSets.main.output

    // Gather relocate source set's source files
    from(sourceSets.relocate.output) {
        exclude 'org/spongepowered/asm/mixin/struct/MemberRef.class'
    }

    // Gather embed dependencies, while excluding any replaceable files and META-INF services
    from(provider {
        configurations.embed.collect {
            if (it.isDirectory()) {
                return it
            } else {
                zipTree(it).matching {
                    exclude '**/MemberRef$Handle.class', '**/FabricUtil.class', '**/LICENSE*', 'META-INF/**'
                }
            }
        }
    })

    // Gather earlier bundled service files
    from fileTree(file("$buildDir/tmp/services_cleanup/")).matching {
        include 'META-INF/services/*'
    }

    // Exclude newer Java/Minecraft shenanigans
    exclude '**/module-info.class'
    exclude 'org/spongepowered/asm/service/modlauncher/*'
    exclude 'org/spongepowered/asm/launch/MixinTransformationServiceLegacy*'
    exclude 'org/spongepowered/asm/launch/MixinLaunchPlugin*'
    exclude 'org/spongepowered/asm/launch/MixinTransformationService*'
    exclude 'org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx*'
    exclude 'META-INF/services/cpw.mods.modlauncher.api.ITransformationService'
    exclude 'META-INF/services/cpw.mods.modlauncher.serviceapi.ILaunchPluginService'

    manifest {
        def attribute_map = [:]
        attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        attribute_map['FMLCorePlugin'] = coremod_plugin_name
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
        attributes(attribute_map)
    }
}

tasks.register('properSourcesJar', Jar) { jar ->
    // Sources classifier
    jar.archiveClassifier.set('sources')

    // Gather all of our own source files
    from sourceSets.main.allSource

    // Gather all of relocated source files
    from(sourceSets.relocate.allSource) {
        exclude '**/MemberRef.java'
    }

    // Gather sources of embed dependencies
    configurations.embed.each { dep ->
        fileTree(dep.getParentFile().getParentFile()).matching {
            include '**/*-sources.jar'
        }.each { sources ->
            from zipTree(sources).matching {
                include '**/*.java'
                exclude '**/MemberRef$Handle.java', '**/FabricUtil.java'
            }
        }
    }

    // Exclude newer Java/Minecraft shenanigans
    exclude '**/module-info.java'
    exclude 'org/spongepowered/asm/service/modlauncher/*'
    exclude 'org/spongepowered/asm/launch/MixinTransformationServiceLegacy*'
    exclude 'org/spongepowered/asm/launch/MixinLaunchPlugin*'
    exclude 'org/spongepowered/asm/launch/MixinTransformationService*'
    exclude 'org/spongepowered/asm/launch/platform/container/ContainerHandleModLauncherEx*'
    exclude 'META-INF/services/cpw.mods.modlauncher.api.ITransformationService'
    exclude 'META-INF/services/cpw.mods.modlauncher.serviceapi.ILaunchPluginService'

}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [(project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')]
                }
            }
        }
    }
}

tasks.named('processIdeaSettings').configure {
    dependsOn 'injectTags'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // from components.java
            groupId project.group
            artifactId project.archivesBaseName
            artifact tasks.named('properJar')
            artifact tasks.named('properSourcesJar')
            artifact tasks.named('javadocJar')
        }
    }
    repositories {
        maven {
            url cleanroom_maven
            credentials {
                username cleanroom_user
                credentials PasswordCredentials
            }
        }
    }
}